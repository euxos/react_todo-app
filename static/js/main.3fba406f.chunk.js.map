{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/AddNewTodo/AddNewTodo.js","components/TodosFilter/TodosFilter.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["TodoItem","title","id","completed","handleToggleStatus","removeTodoItem","className","type","onChange","checked","ClassNames","htmlFor","onClick","TodoList","todoList","map","todoItem","key","AddNewTodo","state","hasTextError","handleInputChange","event","setState","target","value","handleFormSubmit","preventDefault","test","newTodo","props","lastTodoId","addNewTodo","this","onSubmit","placeholder","React","Component","TodosFilter","viewStatus","handleChangeViewStatus","href","TodoApp","isSomeCompleted","checkIfSomeCompleted","some","todo","handleToggleAll","isCompleted","status","filterTodoList","filter","clearCompletedTodos","length","every","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fba406f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nexport const TodoItem = ({\n  title,\n  id,\n  completed,\n  handleToggleStatus,\n  removeTodoItem,\n}) => (\n  <li>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        onChange={() => handleToggleStatus(id)}\n        className=\"toggle\"\n        id={`todo-${id}`}\n        checked={completed}\n      />\n      <label\n        className={ClassNames({ completed })}\n        htmlFor={`todo-${id}`}\n      >\n        {title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => removeTodoItem(id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired,\n  handleToggleStatus: PropTypes.func.isRequired,\n  removeTodoItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({ todoList, handleToggleStatus, removeTodoItem }) => (\n\n  <ul className=\"todo-list\">\n    {todoList.map(todoItem => (\n      <TodoItem\n        {...todoItem}\n        handleToggleStatus={handleToggleStatus}\n        removeTodoItem={removeTodoItem}\n        key={todoItem.id}\n      />\n    ))}\n  </ul>\n\n);\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleToggleStatus: PropTypes.func.isRequired,\n  removeTodoItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nexport class AddNewTodo extends React.Component {\n  state = {\n    title: '',\n    hasTextError: false,\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      hasTextError: false,\n      title: event.target.value,\n    });\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const { title } = this.state;\n\n    if (!title) {\n      this.setState({\n        hasTextError: true,\n      });\n\n      return;\n    }\n\n    if (!(/^[a-zA-z0-9а-яА-Я\\s]+$/).test(title)\n        || (/^\\s*$/).test(title)) {\n      this.setState({\n        hasTextError: true,\n      });\n\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: this.props.lastTodoId + 1,\n      completed: false,\n    };\n\n    this.props.addNewTodo(newTodo);\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title, hasTextError } = this.state;\n\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <input\n          className={ClassNames('new-todo',\n            { 'new-todo--error': hasTextError })}\n          onChange={this.handleInputChange}\n          type=\"text\"\n          value={title}\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nAddNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n  lastTodoId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nexport const TodosFilter = ({ viewStatus, handleChangeViewStatus }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={ClassNames(viewStatus === 'All' ? 'selected' : '')}\n        onClick={() => handleChangeViewStatus('All')}\n      >\n        All\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/active\"\n        className={ClassNames(viewStatus === 'Active' ? 'selected' : '')}\n        onClick={() => handleChangeViewStatus('Active')}\n      >\n        Active\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/completed\"\n        className={ClassNames(viewStatus === 'Completed' ? 'selected' : '')}\n        onClick={() => handleChangeViewStatus('Completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  viewStatus: PropTypes.string.isRequired,\n  handleChangeViewStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from '../TodoList/TodoList';\nimport { AddNewTodo } from '../AddNewTodo/AddNewTodo';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport class TodoApp extends React.Component {\n  state = {\n    todoList: [],\n    lastTodoId: 0,\n    viewStatus: 'All',\n    isSomeCompleted: false,\n  }\n\n  addNewTodo = (newTodo) => {\n    this.setState(state => (\n      {\n        todoList: [...state.todoList, newTodo],\n        lastTodoId: state.lastTodoId + 1,\n      }\n    ));\n  }\n\n  checkIfSomeCompleted = () => {\n    this.setState(state => ({\n      isSomeCompleted: state.todoList.some(todo => todo.completed),\n    }));\n  }\n\n  handleToggleStatus = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === id) {\n          this.checkIfSomeCompleted();\n\n          return ({\n            ...todo,\n            completed: !todo.completed,\n          });\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleToggleAll = () => {\n    const isCompleted = this.state.todoList.some(todo => !todo.completed);\n\n    this.setState(state => (\n      {\n        todoList: [...state.todoList.map(todo => (\n          {\n            ...todo,\n            completed: isCompleted,\n          }\n        ))],\n      }\n    ));\n\n    this.checkIfSomeCompleted();\n  }\n\n  handleChangeViewStatus = (status) => {\n    this.setState({\n      viewStatus: status,\n    });\n  }\n\n  filterTodoList = () => {\n    if (this.state.viewStatus === 'Active') {\n      return this.state.todoList.filter(todo => !todo.completed);\n    }\n\n    if (this.state.viewStatus === 'Completed') {\n      return this.state.todoList.filter(todo => todo.completed);\n    }\n\n    return this.state.todoList;\n  }\n\n  removeTodoItem = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.id !== id),\n    }));\n  }\n\n  clearCompletedTodos = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => !todo.completed),\n    }));\n\n    this.checkIfSomeCompleted();\n  }\n\n  render() {\n    const { lastTodoId, todoList, viewStatus, isSomeCompleted } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <AddNewTodo lastTodoId={lastTodoId} addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\">\n          {(todoList.length > 0) && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onClick={this.handleToggleAll}\n                checked={todoList.every(todo => todo.completed)}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <TodoList\n            todoList={this.filterTodoList()}\n            handleToggleStatus={this.handleToggleStatus}\n            removeTodoItem={this.removeTodoItem}\n          />\n        </section>\n\n        { (todoList.length > 0) && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {todoList.filter(todo => !todo.completed).length}\n              {' '}\n              items left\n            </span>\n\n            <TodosFilter\n              viewStatus={viewStatus}\n              handleChangeViewStatus={this.handleChangeViewStatus}\n            />\n\n            { isSomeCompleted && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompletedTodos}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nexport const App = () => (\n  <TodoApp />\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}