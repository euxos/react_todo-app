{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/AddNewTodo/AddNewTodo.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["TodoItem","state","title","props","id","completed","handleCheckboxChange","setState","this","className","type","onChange","ClassNames","htmlFor","React","Component","TodoList","todoList","map","todoItem","AddNewTodo","hasTextError","handleInputChange","event","target","value","handleFormSubmit","preventDefault","test","newTodo","lastTodoId","addNewTodo","onSubmit","placeholder","TodoApp","length","href","App","ReactDOM","render","document","getElementById"],"mappings":"6QAIaA,EAAb,4MACEC,MAAQ,CACNC,MAAO,EAAKC,MAAMD,MAClBE,GAAI,EAAKD,MAAMC,GACfC,UAAW,EAAKF,MAAME,WAJ1B,EAOEC,qBAAuB,WACrB,EAAKC,UAAS,SAAAN,GAAK,MAAK,CACtBI,WAAYJ,EAAMI,eATxB,uDAaY,IAAD,EAC0BG,KAAKP,MAA9BC,EADD,EACCA,MAAOE,EADR,EACQA,GAAIC,EADZ,EACYA,UAEnB,OACE,4BACE,yBAAKI,UAAU,QACb,2BACEC,KAAK,WACLC,SAAUH,KAAKF,qBACfG,UAAU,SACVL,GAAE,eAAUA,KAEd,2BACEK,UAAWG,IAAW,CAAEP,cACxBQ,QAAO,eAAUT,IAEhBF,GAEH,4BAAQQ,KAAK,SAASD,UAAU,aAElC,2BAAOC,KAAK,OAAOD,UAAU,cAjCrC,GAA8BK,IAAMC,WCCvBC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAEtB,wBAAIR,UAAU,aACXQ,EAASC,KAAI,SAAAC,GAAQ,OACpB,kBAAC,EAAaA,QCLPC,EAAb,4MACEnB,MAAQ,CACNC,MAAO,GACPmB,cAAc,GAHlB,EAMEC,kBAAoB,SAACC,GACnB,EAAKhB,SAAS,CACZc,cAAc,EACdnB,MAAOqB,EAAMC,OAAOC,SAT1B,EAaEC,iBAAmB,SAACH,GAClBA,EAAMI,iBADsB,IAGpBzB,EAAU,EAAKD,MAAfC,MAER,GAAKA,EAQL,GAAM,6CAA0B0B,KAAK1B,KAC7B,QAAS0B,KAAK1B,GADtB,CASA,IAAM2B,EAAU,CACd3B,QACAE,GAAI,EAAKD,MAAM2B,WAAa,EAC5BzB,WAAW,GAGb,EAAKF,MAAM4B,WAAWF,GAEtB,EAAKtB,SAAS,CACZL,MAAO,UAhBP,EAAKK,SAAS,CACZc,cAAc,SAVhB,EAAKd,SAAS,CACZc,cAAc,KApBtB,uDAgDY,IAAD,EACyBb,KAAKP,MAA7BC,EADD,EACCA,MAAOmB,EADR,EACQA,aAEf,OACE,0BAAMW,SAAUxB,KAAKkB,kBACnB,2BACEjB,UAAWG,IAAW,WACpB,CAAE,kBAAmBS,IACvBV,SAAUH,KAAKc,kBACfZ,KAAK,OACLe,MAAOvB,EACP+B,YAAY,gCA3DtB,GAAgCnB,IAAMC,WCAzBmB,EAAb,4MACEjC,MAAQ,CACNgB,SAAU,GACVa,WAAY,GAHhB,EAMEC,WAAa,SAACF,GACZ,EAAKtB,UAAS,SAAAN,GAAK,MACjB,CACEgB,SAAS,GAAD,mBAAMhB,EAAMgB,UAAZ,CAAsBY,IAC9BC,WAAY7B,EAAM6B,WAAa,OAVvC,uDAeY,IAAD,EAC0BtB,KAAKP,MAA9B6B,EADD,EACCA,WAAYb,EADb,EACaA,SAEpB,OACE,6BAASR,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,kBAAC,EAAD,CAAYqB,WAAYA,EAAYC,WAAYvB,KAAKuB,cAGvD,6BAAStB,UAAU,QACjB,2BAAOC,KAAK,WAAWN,GAAG,aAAaK,UAAU,eACjD,2BAAOI,QAAQ,cAAf,wBAEA,kBAAC,EAAD,CAAUI,SAAUA,KAGtB,4BAAQR,UAAU,UAChB,0BAAMA,UAAU,cACbQ,EAASkB,OACT,IAFH,cAMA,wBAAI1B,UAAU,WACZ,4BACE,uBAAG2B,KAAK,KAAK3B,UAAU,YAAvB,QAGF,4BACE,uBAAG2B,KAAK,YAAR,WAGF,4BACE,uBAAGA,KAAK,eAAR,eAIJ,4BAAQ1B,KAAK,SAASD,UAAU,mBAAhC,yBAtDV,GAA6BK,IAAMC,WCDtBsB,EAAM,kBACjB,kBAAC,EAAD,OCEFC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.e1b31941.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nexport class TodoItem extends React.Component {\n  state = {\n    title: this.props.title,\n    id: this.props.id,\n    completed: this.props.completed,\n  };\n\n  handleCheckboxChange = () => {\n    this.setState(state => ({\n      completed: !state.completed,\n    }));\n  }\n\n  render() {\n    const { title, id, completed } = this.state;\n\n    return (\n      <li>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            onChange={this.handleCheckboxChange}\n            className=\"toggle\"\n            id={`todo-${id}`}\n          />\n          <label\n            className={ClassNames({ completed })}\n            htmlFor={`todo-${id}`}\n          >\n            {title}\n          </label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({ todoList }) => (\n\n  <ul className=\"todo-list\">\n    {todoList.map(todoItem => (\n      <TodoItem {...todoItem} />\n    ))}\n  </ul>\n\n);\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nexport class AddNewTodo extends React.Component {\n  state = {\n    title: '',\n    hasTextError: false,\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      hasTextError: false,\n      title: event.target.value,\n    });\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const { title } = this.state;\n\n    if (!title) {\n      this.setState({\n        hasTextError: true,\n      });\n\n      return;\n    }\n\n    if (!(/^[a-zA-z0-9а-яА-Я\\s]+$/).test(title)\n        || (/^\\s*$/).test(title)) {\n      this.setState({\n        hasTextError: true,\n      });\n\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: this.props.lastTodoId + 1,\n      completed: false,\n    };\n\n    this.props.addNewTodo(newTodo);\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title, hasTextError } = this.state;\n\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <input\n          className={ClassNames('new-todo',\n            { 'new-todo--error': hasTextError })}\n          onChange={this.handleInputChange}\n          type=\"text\"\n          value={title}\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nAddNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n  lastTodoId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from '../TodoList/TodoList';\nimport { AddNewTodo } from '../AddNewTodo/AddNewTodo';\n\nexport class TodoApp extends React.Component {\n  state = {\n    todoList: [],\n    lastTodoId: 0,\n  }\n\n  addNewTodo = (newTodo) => {\n    this.setState(state => (\n      {\n        todoList: [...state.todoList, newTodo],\n        lastTodoId: state.lastTodoId + 1,\n      }\n    ));\n  }\n\n  render() {\n    const { lastTodoId, todoList } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <AddNewTodo lastTodoId={lastTodoId} addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList todoList={todoList} />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {todoList.length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a href=\"#/\" className=\"selected\">All</a>\n            </li>\n\n            <li>\n              <a href=\"#/active\">Active</a>\n            </li>\n\n            <li>\n              <a href=\"#/completed\">Completed</a>\n            </li>\n          </ul>\n\n          <button type=\"button\" className=\"clear-completed\">\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nexport const App = () => (\n  <TodoApp />\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}